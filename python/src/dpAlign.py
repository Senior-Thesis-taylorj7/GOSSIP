# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dpAlign', [dirname(__file__)])
        except ImportError:
            import _dpAlign
            return _dpAlign
        if fp is not None:
            try:
                _mod = imp.load_module('_dpAlign', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dpAlign = swig_import_helper()
    del swig_import_helper
else:
    import _dpAlign
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dpAlign.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dpAlign.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _dpAlign.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _dpAlign.doubleArray___setitem__(self, *args)
    def cast(self): return _dpAlign.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _dpAlign.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_dpAlign.doubleArray_frompointer)
doubleArray_swigregister = _dpAlign.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _dpAlign.doubleArray_frompointer(*args)
doubleArray_frompointer = _dpAlign.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dpAlign.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dpAlign.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _dpAlign.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _dpAlign.intArray___setitem__(self, *args)
    def cast(self): return _dpAlign.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _dpAlign.intArray_frompointer
    if _newclass:frompointer = staticmethod(_dpAlign.intArray_frompointer)
intArray_swigregister = _dpAlign.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _dpAlign.intArray_frompointer(*args)
intArray_frompointer = _dpAlign.intArray_frompointer


def CalcGlobalAlignment(*args):
  return _dpAlign.CalcGlobalAlignment(*args)
CalcGlobalAlignment = _dpAlign.CalcGlobalAlignment

def freeAlignInfo(*args):
  return _dpAlign.freeAlignInfo(*args)
freeAlignInfo = _dpAlign.freeAlignInfo

def getDPVal(*args):
  return _dpAlign.getDPVal(*args)
getDPVal = _dpAlign.getDPVal

def getSeqLen(*args):
  return _dpAlign.getSeqLen(*args)
getSeqLen = _dpAlign.getSeqLen

def getSeq(*args):
  return _dpAlign.getSeq(*args)
getSeq = _dpAlign.getSeq

def assessAlignment(*args):
  return _dpAlign.assessAlignment(*args)
assessAlignment = _dpAlign.assessAlignment

def getTPR(*args):
  return _dpAlign.getTPR(*args)
getTPR = _dpAlign.getTPR

def getFPR(*args):
  return _dpAlign.getFPR(*args)
getFPR = _dpAlign.getFPR

def getNumCorrect(*args):
  return _dpAlign.getNumCorrect(*args)
getNumCorrect = _dpAlign.getNumCorrect

def getPartitionSize(*args):
  return _dpAlign.getPartitionSize(*args)
getPartitionSize = _dpAlign.getPartitionSize

def getROCarea(*args):
  return _dpAlign.getROCarea(*args)
getROCarea = _dpAlign.getROCarea

def getMaxScore(*args):
  return _dpAlign.getMaxScore(*args)
getMaxScore = _dpAlign.getMaxScore

def getMinScore(*args):
  return _dpAlign.getMinScore(*args)
getMinScore = _dpAlign.getMinScore

def getBestDiscernmentVal(*args):
  return _dpAlign.getBestDiscernmentVal(*args)
getBestDiscernmentVal = _dpAlign.getBestDiscernmentVal

def getBestTPR(*args):
  return _dpAlign.getBestTPR(*args)
getBestTPR = _dpAlign.getBestTPR

def getBestFPR(*args):
  return _dpAlign.getBestFPR(*args)
getBestFPR = _dpAlign.getBestFPR

def freeAssessInfo(*args):
  return _dpAlign.freeAssessInfo(*args)
freeAssessInfo = _dpAlign.freeAssessInfo
# This file is compatible with both classic and new-style classes.


